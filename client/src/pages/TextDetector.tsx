
import React, { useState } from 'react';
import { Send } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { toast } from '@/hooks/use-toast';

const TextDetector = () => {
  const [text, setText] = useState('');
  const [result, setResult] = useState<{ type: string; confidence: number } | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!text.trim()) {
      toast({
        title: "Error",
        description: "Please enter some text to analyze",
        variant: "destructive",
      });
      return;
    }
    
    setIsLoading(true);
    try {
      const response = await fetch('http://localhost:8000/text', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ text }),
      });
      
      if (!response.ok) {
        throw new Error('Server error');
      }
      
      const data = await response.json();
      // Parse the response based on the expected format
      // "AI-generated" if prediction == 1 else "Human-written", round(confidence * 100, 2)
      console.log(data)
      const type = data.data.type;
      const confidence = data.data.confidence;
      
      setResult({ type, confidence });
      
      // Show success toast
      toast({
        title: "Analysis Complete",
        description: "Text has been successfully analyzed.",
      });
    } catch (error) {
      console.error('Error:', error);
      toast({
        title: "Connection Error",
        description: "Could not connect to the detection server. Make sure it's running at localhost:8000.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container mx-auto max-w-3xl">
      <div className="space-y-6">
        <div className="space-y-2">
          <h1 className="text-3xl font-bold tracking-tight sm:text-4xl">AI vs Human Text Detector</h1>
          <p className="text-muted-foreground">
            Detect whether text was written by a human or generated by AI.
          </p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <label htmlFor="text" className="text-sm font-medium leading-none">
              Enter your text:
            </label>
            <Textarea
              id="text"
              value={text}
              onChange={(e) => setText(e.target.value)}
              placeholder="Paste the text you want to analyze here..."
              className="min-h-[200px]"
              disabled={isLoading}
            />
          </div>

          <Button 
            type="submit" 
            disabled={isLoading || !text.trim()}
            className="w-full md:w-auto"
          >
            {isLoading ? (
              <span className="flex items-center gap-2">
                <div className="h-4 w-4 animate-spin rounded-full border-2 border-background border-t-transparent"></div>
                Analyzing...
              </span>
            ) : (
              <>
                <Send className="mr-2 h-4 w-4" />
                Analyze Text
              </>
            )}
          </Button>
        </form>

        {result && (
          <Card>
            <CardHeader>
              <CardTitle>Analysis Result</CardTitle>
              <CardDescription>Our system has analyzed your text</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex flex-col gap-2">
                  <div className="text-2xl font-bold">
                    {result.type}
                  </div>
                  <div className="text-muted-foreground">
                    Confidence: {result.confidence.toFixed(2)}%
                  </div>
                </div>
                
                <div className="h-2 w-full bg-secondary rounded-full overflow-hidden">
                  <div 
                    className={`h-full ${result.type === 'AI-generated' ? 'bg-tool-essay' : 'bg-green-500'}`}
                    style={{ width: `${result.confidence}%` }}
                  />
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
};

export default TextDetector;
